--=============================================================================
-- Create TABLE and associated objects
--=============================================================================

/*
DROP TABLE ERROR_LOG
DROP TABLE FORM_DTL
DROP TABLE FORM_DTL_AUDIT
DROP TABLE LOOKUP
DROP TABLE DUTYLOCATION
DROP TABLE ADMINCODE
DROP TABLE OCCUPATIONALSERIES
DROP TABLE GRADE
DROP TABLE ATTACH_AUDIT
DROP TABLE SEND_EMAIL
DROP TABLE COMPLETE_WAIT
DROP TABLE IHS_RECRUITEMENT_DATA
DROP VIEW V_IHS_RECRUITEMENT_REPORT

DROP SEQUENCE ERROR_LOG_SEQ
DROP SEQUENCE IHS_FORM_DATA_SEQ
DROP SEQUENCE FORM_DTL_AUDIT_SEQ
DROP SEQUENCE LOOKUP_SEQ
DROP SEQUENCE DUTYLOCATION_SEQ
DROP SEQUENCE ADMINCODE_SEQ
DROP SEQUENCE OCCUPATIONALSERIES_SEQ
DROP SEQUENCE GRADE_SEQ
DROP SEQUENCE ATTACH_AUDIT_SEQ
DROP SEQUENCE SEND_EMAIL_SEQ
DROP SEQUENCE COMPLETE_WAIT_SEQ
*/

--------------------------------------------------------
--  DDL for Table ERROR_LOG
--------------------------------------------------------

CREATE TABLE ERROR_LOG
(
	ID                  INTEGER
	, ERROR_CD          INTEGER
	, ERROR_MSG         VARCHAR2(4000)
	, BACKTRACE         CLOB
	, CALLSTACK         CLOB
	, CRT_DT            DATE
	, CRT_USR           VARCHAR2(50)
);

ALTER TABLE ERROR_LOG ADD CONSTRAINT ERROR_LOG_PK PRIMARY KEY (ID);
/



COMMENT ON COLUMN ERROR_LOG.ID IS 'Unique primary key';
COMMENT ON COLUMN ERROR_LOG.ERROR_CD IS 'Error code';
COMMENT ON COLUMN ERROR_LOG.ERROR_MSG IS 'Error message';
COMMENT ON COLUMN ERROR_LOG.BACKTRACE IS 'Error trace';
COMMENT ON COLUMN ERROR_LOG.CALLSTACK IS 'PL/SQL call stack that leads to the error';
COMMENT ON COLUMN ERROR_LOG.CRT_DT IS 'Creation Date';
COMMENT ON COLUMN ERROR_LOG.CRT_USR IS 'Creation User';



CREATE SEQUENCE ERROR_LOG_SEQ
	INCREMENT BY 1
	START WITH 1
	NOMAXVALUE
	NOCYCLE
	NOCACHE;

/


CREATE OR REPLACE TRIGGER ERROR_LOG_BIR
BEFORE INSERT ON ERROR_LOG
FOR EACH ROW
BEGIN
	SELECT ERROR_LOG_SEQ.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;

/

--------------------------------------------------------
--  DDL for Table FORM_DTL
--------------------------------------------------------

CREATE TABLE FORM_DTL
(
	ID                      NUMBER(20) NOT NULL
	, PROCID                NUMBER(10)
	, ACTSEQ                NUMBER(10)
	, WITEMSEQ              NUMBER(10)
	, FORM_TYPE             VARCHAR2(50)
	, FIELD_DATA            XMLTYPE
	, CRT_DT                TIMESTAMP
	, CRT_USR               VARCHAR2(50)
	, MOD_DT                TIMESTAMP
	, MOD_USR               VARCHAR2(50)
);

ALTER TABLE FORM_DTL ADD CONSTRAINT FORM_DTL_PK PRIMARY KEY (ID);

CREATE INDEX FORM_DTL_NK1 ON FORM_DTL (PROCID);


COMMENT ON COLUMN FORM_DTL.ID IS 'Unique primary key';
COMMENT ON COLUMN FORM_DTL.PROCID IS 'Foreign key. Process ID of the related BIZFLOW.PROCS table';
COMMENT ON COLUMN FORM_DTL.ACTSEQ IS 'Foreign key. Activity Sequence of the related BIZFLOW.ACT table';
COMMENT ON COLUMN FORM_DTL.WITEMSEQ IS 'Foreign key. Work Item Sequence of the related BIZFLOW.WITEM table';
COMMENT ON COLUMN FORM_DTL.FORM_TYPE IS 'Form Type.  Indicates what form data is stored in the record';
COMMENT ON COLUMN FORM_DTL.FIELD_DATA IS 'XML representation of the form data';
COMMENT ON COLUMN FORM_DTL.CRT_DT IS 'Creation Date';
COMMENT ON COLUMN FORM_DTL.CRT_USR IS 'Creation User';
COMMENT ON COLUMN FORM_DTL.MOD_DT IS 'Modification Date';
COMMENT ON COLUMN FORM_DTL.MOD_USR IS 'Modification User';


CREATE SEQUENCE IHS_FORM_DATA_SEQ
	INCREMENT BY 1
	START WITH 1
	NOMAXVALUE
	NOCYCLE
	NOCACHE;

/

CREATE OR REPLACE TRIGGER FORM_DTL_BIR
BEFORE INSERT ON FORM_DTL
FOR EACH ROW
BEGIN
	SELECT IHS_FORM_DATA_SEQ.NEXTVAL
	INTO :NEW.ID
	FROM DUAL
	;
END
;

/


---------------------------------------------------
-- Auditing utility for form data xml table
---------------------------------------------------

CREATE TABLE FORM_DTL_AUDIT
(
	AUDITID                 NUMBER(20)

	, ID                    NUMBER(20)
	, PROCID                NUMBER(10)
	, ACTSEQ                NUMBER(10)
	, WITEMSEQ              NUMBER(10)
	, FORM_TYPE             VARCHAR2(50)
	, FIELD_DATA            XMLTYPE
	, CRT_DT                TIMESTAMP
	, CRT_USR               VARCHAR2(50)
	, MOD_DT                TIMESTAMP
	, MOD_USR               VARCHAR2(50)

	, AUDIT_ACTION          VARCHAR2(50)
	, AUDIT_TS				TIMESTAMP
);

ALTER TABLE FORM_DTL_AUDIT ADD CONSTRAINT FORM_DTL_AUDIT_PK PRIMARY KEY (AUDITID);

-- optional index for search performance
CREATE INDEX FORM_DTL_AUDIT_NK1 ON FORM_DTL_AUDIT (ID);

-- optional index for search performance
CREATE INDEX FORM_DTL_AUDIT_NK2 ON FORM_DTL_AUDIT (PROCID);


COMMENT ON COLUMN FORM_DTL_AUDIT.AUDITID IS 'Unique primary key.';
COMMENT ON COLUMN FORM_DTL_AUDIT.ID IS 'Unique primary key of FORM_DTL table record being audited.';
COMMENT ON COLUMN FORM_DTL_AUDIT.PROCID IS 'Foreign key of FORM_DTL table record being audited. Process ID of the related BIZFLOW.PROCS table.';
COMMENT ON COLUMN FORM_DTL_AUDIT.ACTSEQ IS 'Foreign key of FORM_DTL table record being audited. Activity Sequence of the related BIZFLOW.ACT table.';
COMMENT ON COLUMN FORM_DTL_AUDIT.WITEMSEQ IS 'Foreign key of FORM_DTL table record being audited. Work Item Sequence of the related BIZFLOW.WITEM table.';
COMMENT ON COLUMN FORM_DTL_AUDIT.FORM_TYPE IS 'Form Type of FORM_DTL table record being audited.  Indicates what form data is stored in the record.';
COMMENT ON COLUMN FORM_DTL_AUDIT.FIELD_DATA IS 'XML representation of the form data of FORM_DTL table record being audited.';
COMMENT ON COLUMN FORM_DTL_AUDIT.CRT_DT IS 'Creation Date of FORM_DTL table record being audited';
COMMENT ON COLUMN FORM_DTL_AUDIT.CRT_USR IS 'Creation User of FORM_DTL table record being audited';
COMMENT ON COLUMN FORM_DTL_AUDIT.MOD_DT IS 'Modification Date of FORM_DTL table record being audited';
COMMENT ON COLUMN FORM_DTL_AUDIT.MOD_USR IS 'Modification User of FORM_DTL table record being audited';
COMMENT ON COLUMN FORM_DTL_AUDIT.AUDIT_ACTION IS 'Audit action.  Expected values are INSERTING, UPDATING, or DELETING.';
COMMENT ON COLUMN FORM_DTL_AUDIT.AUDIT_TS IS 'Audit timestamp';


CREATE SEQUENCE FORM_DTL_AUDIT_SEQ
	INCREMENT BY 1
	START WITH 1
	NOMAXVALUE
	NOCYCLE
	NOCACHE;
/


CREATE OR REPLACE TRIGGER FORM_DTL_AUDIT_BIR
BEFORE INSERT ON FORM_DTL_AUDIT
FOR EACH ROW
BEGIN
	SELECT FORM_DTL_AUDIT_SEQ.NEXTVAL
	INTO :NEW.AUDITID
	FROM DUAL;
END;

/


--------------------------------------------------------
--  DDL for Table LOOKUP
--------------------------------------------------------

CREATE TABLE LOOKUP
(
	TBL_ID NUMBER(*,0)
	, TBL_PARENT_ID NUMBER(*,0)
	, TBL_LTYPE NVARCHAR2(50)
	, TBL_NAME NVARCHAR2(100)
	, TBL_LABEL NVARCHAR2(1000)
	, TBL_ACTIVE CHAR(1)
	, TBL_DISP_ORDER NUMBER(*,0)
	, TBL_MANDATORY NVARCHAR2(10)
	, TBL_REGION NVARCHAR2(50)
	, TBL_CATEGORY NVARCHAR2(50)
	, TBL_EFFECTIVE_DT DATE
	, TBL_EXPIRATION_DT DATE
);

ALTER TABLE LOOKUP ADD CONSTRAINT LOOKUP_PK PRIMARY KEY (TBL_ID);

CREATE INDEX LOOKUP_NK1 ON LOOKUP (TBL_LTYPE);

COMMENT ON COLUMN LOOKUP.TBL_ID IS 'Unique primary key';
COMMENT ON COLUMN LOOKUP.TBL_PARENT_ID IS 'Key value of associated parent data';
COMMENT ON COLUMN LOOKUP.TBL_LTYPE IS 'List identity';
COMMENT ON COLUMN LOOKUP.TBL_NAME IS 'Name of unique value within the list';
COMMENT ON COLUMN LOOKUP.TBL_LABEL IS 'Actual value displayed for this name';
COMMENT ON COLUMN LOOKUP.TBL_ACTIVE IS 'Is this code active? 0=false, 1=true';
COMMENT ON COLUMN LOOKUP.TBL_DISP_ORDER IS 'The order number in which the label should appear within the list';
COMMENT ON COLUMN LOOKUP.TBL_MANDATORY IS 'Mandatory indicator (not used)';
COMMENT ON COLUMN LOOKUP.TBL_REGION IS 'Region to identify organization sub-division (future use)';
COMMENT ON COLUMN LOOKUP.TBL_CATEGORY IS 'Category indicator - alternate grouping (not used)';
COMMENT ON COLUMN LOOKUP.TBL_EFFECTIVE_DT IS 'Date this code is in effect';
COMMENT ON COLUMN LOOKUP.TBL_EXPIRATION_DT IS 'Date this code becomes obsolete';

/
CREATE SEQUENCE LOOKUP_SEQ
	INCREMENT BY 1
	START WITH 1
	NOMAXVALUE
	NOCYCLE
	NOCACHE;
/


CREATE OR REPLACE TRIGGER LOOKUP_BIR
BEFORE INSERT ON LOOKUP
FOR EACH ROW
BEGIN
	SELECT LOOKUP_SEQ.NEXTVAL
	INTO :NEW.TBL_ID
	FROM DUAL;
END;
/

-------------------------------------------------------
--  DDL for Table DUTY LOCATION
--------------------------------------------------------
CREATE TABLE DUTYLOCATION
(
    ID NUMBER (*,0)
	, LOC_CODE NVARCHAR2(20)
	, LOC_COUNTRY NVARCHAR2(100)
	, LOC_STATE NVARCHAR2(100)
	, LOC_CITY NVARCHAR2(100)
	, LOC_COUNTY NVARCHAR2(100)
);

ALTER TABLE DUTYLOCATION ADD CONSTRAINT DUTYLOCATION_PK PRIMARY KEY (ID);

CREATE INDEX DUTYLOCATION_NK1 ON DUTYLOCATION (LOC_CITY);
CREATE INDEX DUTYLOCATION_NK2 ON DUTYLOCATION (LOC_COUNTY);
CREATE INDEX DUTYLOCATION_NK3 ON DUTYLOCATION (LOC_STATE);
CREATE SEQUENCE DUTYLOCATION_SEQ
	INCREMENT BY 1
	START WITH 1
	NOMAXVALUE
	NOCYCLE
	NOCACHE;

COMMENT ON COLUMN DUTYLOCATION.ID IS 'Unique primary key';
COMMENT ON COLUMN DUTYLOCATION.LOC_CODE IS 'Location code';
COMMENT ON COLUMN DUTYLOCATION.LOC_COUNTRY IS 'Country';
COMMENT ON COLUMN DUTYLOCATION.LOC_STATE IS 'State';
COMMENT ON COLUMN DUTYLOCATION.LOC_CITY IS 'City';
COMMENT ON COLUMN DUTYLOCATION.LOC_COUNTY IS 'County';
	
CREATE OR REPLACE TRIGGER DUTYLOCATION_BIR
BEFORE INSERT ON DUTYLOCATION
FOR EACH ROW
BEGIN
	SELECT DUTYLOCATION_SEQ.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/

-------------------------------------------------------
--  DDL for Table Admin Code
--------------------------------------------------------
CREATE TABLE ADMINCODE
(
    ID NUMBER (*,0)
	, ADMIN_CODE NVARCHAR2(20)
	, DESCRIPTION NVARCHAR2(500)
);

ALTER TABLE ADMINCODE ADD CONSTRAINT ADMINCODE_PK PRIMARY KEY (ID);

COMMENT ON COLUMN ADMINCODE.ID IS 'Unique primary key';
COMMENT ON COLUMN ADMINCODE.ADMIN_CODE IS 'Admin Code';
COMMENT ON COLUMN ADMINCODE.DESCRIPTION IS 'Admin Code Description';

CREATE INDEX ADMINCODE_NK1 ON ADMINCODE (ADMIN_CODE);
CREATE SEQUENCE ADMINCODE_SEQ
	INCREMENT BY 1
	START WITH 1
	NOMAXVALUE
	NOCYCLE
	NOCACHE;

CREATE OR REPLACE TRIGGER ADMINCODE_BIR
BEFORE INSERT ON ADMINCODE
FOR EACH ROW
BEGIN
	SELECT ADMINCODE_SEQ.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/


-------------------------------------------------------
--  DDL for Table Occupational Series
--------------------------------------------------------
CREATE TABLE OCCUPATIONALSERIES
(
    ID NUMBER (*,0)
	, SERIES_CODE NVARCHAR2(20)
	, DESCRIPTION NVARCHAR2(500)
	, PAY_PLAN NVARCHAR2(20)
);

ALTER TABLE OCCUPATIONALSERIES ADD CONSTRAINT OCCUPATIONALSERIES_PK PRIMARY KEY (ID);

COMMENT ON COLUMN OCCUPATIONALSERIES.ID IS 'Unique primary key';
COMMENT ON COLUMN OCCUPATIONALSERIES.SERIES_CODE IS 'Series Code';
COMMENT ON COLUMN OCCUPATIONALSERIES.DESCRIPTION IS 'Series Description';
COMMENT ON COLUMN OCCUPATIONALSERIES.PAY_PLAN IS 'Corresponding Pay Plan';

CREATE INDEX OCCUPATIONALSERIES_NK1 ON OCCUPATIONALSERIES (SERIES_CODE);
CREATE SEQUENCE OCCUPATIONALSERIES_SEQ
	INCREMENT BY 1
	START WITH 1
	NOMAXVALUE
	NOCYCLE
	NOCACHE;

CREATE OR REPLACE TRIGGER OCCUPATIONALSERIES_BIR
BEFORE INSERT ON OCCUPATIONALSERIES
FOR EACH ROW
BEGIN
	SELECT OCCUPATIONALSERIES_SEQ.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/

-------------------------------------------------------
--  DDL for Table GRADE
--------------------------------------------------------
CREATE TABLE GRADE
(
    ID NUMBER (*,0)
	, GRADE NVARCHAR2(20)
	, PAY_PLAN NVARCHAR2(20)
);

ALTER TABLE GRADE ADD CONSTRAINT GRADE_PK PRIMARY KEY (ID);

COMMENT ON COLUMN GRADE.ID IS 'Unique primary key';
COMMENT ON COLUMN GRADE.GRADE IS 'Grade';
COMMENT ON COLUMN GRADE.PAY_PLAN IS 'Corresponding Pay Plan';

CREATE SEQUENCE GRADE_SEQ
	INCREMENT BY 1
	START WITH 1
	NOMAXVALUE
	NOCYCLE
	NOCACHE;

CREATE OR REPLACE TRIGGER GRADE_BIR
BEFORE INSERT ON GRADE
FOR EACH ROW
BEGIN
	SELECT GRADE_SEQ.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
-------------------------------------------------------
--  DDL for Table ATTACH_AUDIT
--------------------------------------------------------
CREATE TABLE ATTACH_AUDIT
(
	ID                      NUMBER(20) NOT NULL
	, PROCID                NUMBER(10)
	, USER_ID         		VARCHAR2(10)
	, USER_NAME       		NVARCHAR2(200)
	, EVENT_TYPE        	VARCHAR2(50)
	, FILENAME				NVARCHAR2(200)
	, CATEGORY				VARCHAR2(100)
	, CRT_DT                TIMESTAMP
);

ALTER TABLE ATTACH_AUDIT ADD CONSTRAINT ATTACH_AUDIT_PK PRIMARY KEY (ID);

COMMENT ON COLUMN ATTACH_AUDIT.ID IS 'Unique primary key';
COMMENT ON COLUMN ATTACH_AUDIT.PROCID IS 'Tracking Number';
COMMENT ON COLUMN ATTACH_AUDIT.USER_ID IS 'User ID';
COMMENT ON COLUMN ATTACH_AUDIT.USER_NAME IS 'User name';
COMMENT ON COLUMN ATTACH_AUDIT.EVENT_TYPE IS 'Event type';
COMMENT ON COLUMN ATTACH_AUDIT.FILENAME IS 'Deleted file name';
COMMENT ON COLUMN ATTACH_AUDIT.CATEGORY IS 'Deleted file document category';
COMMENT ON COLUMN ATTACH_AUDIT.CRT_DT IS 'Deleted time';

CREATE SEQUENCE ATTACH_AUDIT_SEQ
	INCREMENT BY 1
	START WITH 1
	NOMAXVALUE
	NOCYCLE
	NOCACHE;

CREATE OR REPLACE TRIGGER ATTACH_AUDIT_BIR
BEFORE INSERT ON ATTACH_AUDIT
FOR EACH ROW
BEGIN
	SELECT ATTACH_AUDIT_SEQ.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
-------------------------------------------------------
--  DDL for Table SEND_EMAIL
--------------------------------------------------------
CREATE TABLE SEND_EMAIL
(
	ID                      NUMBER(20) NOT NULL
	, PARENT_ID             NUMBER(10)
	, REQUEST_ID         	VARCHAR2(100)
	, SENDER_ID         	VARCHAR2(13)
	, RECIPIENT_ID         	VARCHAR2(13)
	, CC_ID         		VARCHAR2(13)
	, EMAIL_BODY			NVARCHAR2(2000)
	, REMAINING_SLA        	VARCHAR2(20)
	, CRT_DT                TIMESTAMP
	, RCV_DT                TIMESTAMP
	, PROCID                NUMBER(10)
	, PROCESSED_DT          TIMESTAMP
);

ALTER TABLE SEND_EMAIL ADD CONSTRAINT SEND_EMAIL_PK PRIMARY KEY (ID);

COMMENT ON COLUMN SEND_EMAIL.ID IS 'Unique primary key';
COMMENT ON COLUMN SEND_EMAIL.PARENT_ID IS 'Tracking Number';
COMMENT ON COLUMN SEND_EMAIL.REQUEST_ID IS 'Unique email request ID generated by client';
COMMENT ON COLUMN SEND_EMAIL.SENDER_ID IS 'Sender User ID';
COMMENT ON COLUMN SEND_EMAIL.RECIPIENT_ID IS 'Recipient User ID';
COMMENT ON COLUMN SEND_EMAIL.CC_ID IS 'CC User ID';
COMMENT ON COLUMN SEND_EMAIL.EMAIL_BODY IS 'Email body';
COMMENT ON COLUMN SEND_EMAIL.REMAINING_SLA IS 'Remaining SLA for parent process';
COMMENT ON COLUMN SEND_EMAIL.CRT_DT IS 'Request time';
COMMENT ON COLUMN SEND_EMAIL.RCV_DT IS 'Reply email received time';
COMMENT ON COLUMN SEND_EMAIL.PROCID IS 'Generated process ID';
COMMENT ON COLUMN SEND_EMAIL.PROCESSED_DT IS 'ERA processed time';

CREATE SEQUENCE SEND_EMAIL_SEQ
	INCREMENT BY 1
	START WITH 1
	NOMAXVALUE
	NOCYCLE
	NOCACHE;

CREATE OR REPLACE TRIGGER SEND_EMAIL_BIR
BEFORE INSERT ON SEND_EMAIL
FOR EACH ROW
BEGIN
	SELECT SEND_EMAIL_SEQ.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/

-------------------------------------------------------
--  DDL for Table COMPLETE_WAIT
--------------------------------------------------------
CREATE TABLE COMPLETE_WAIT
(
	ID                      NUMBER(20) NOT NULL
	, PROCESSID             NUMBER(10)
	, TRUE_COL	         	VARCHAR2(10)
	, CRT_DT                TIMESTAMP
	, PROCESSED_DT          TIMESTAMP
);

ALTER TABLE COMPLETE_WAIT ADD CONSTRAINT COMPLETE_WAIT_PK PRIMARY KEY (ID);

COMMENT ON COLUMN COMPLETE_WAIT.ID IS 'Unique primary key';
COMMENT ON COLUMN COMPLETE_WAIT.PROCESSID IS 'Tracking Number';
COMMENT ON COLUMN COMPLETE_WAIT.TRUE_COL IS 'True value holder column';
COMMENT ON COLUMN COMPLETE_WAIT.CRT_DT IS 'Request time';
COMMENT ON COLUMN COMPLETE_WAIT.PROCESSED_DT IS 'ERA processed time';

CREATE SEQUENCE COMPLETE_WAIT_SEQ
	INCREMENT BY 1
	START WITH 1
	NOMAXVALUE
	NOCYCLE
	NOCACHE;

CREATE OR REPLACE TRIGGER COMPLETE_WAIT_BIR
BEFORE INSERT ON COMPLETE_WAIT
FOR EACH ROW
BEGIN
	SELECT COMPLETE_WAIT_SEQ.NEXTVAL
	INTO :NEW.ID
	FROM DUAL;
END;
/
-------------------------------------------------------
--  DDL for Table IHS_REPORT
--------------------------------------------------------
CREATE TABLE IHS_RECRUITEMENT_DATA
(
	TRACKING_NUMBER			NUMBER(10),
	ACTION_TYPE				VARCHAR2(100),
	INITIATOR				VARCHAR2(100),
	CLASSIFIER				VARCHAR2(100),
	HR_MANAGER				VARCHAR2(100),
	HR_SPECIALIST			VARCHAR2(100),
	CANCEL_REASON			VARCHAR2(100),
	PAY_PLAN				VARCHAR2(100),
	JOB_CODE				VARCHAR2(100),
	SERIES					VARCHAR2(4000),
	GRADE					VARCHAR2(50),
	POSITION_TITLE			VARCHAR2(100),
	PN_COUNT				NUMBER(1),
	POSITION_NUMBER			VARCHAR2(100),
	VICE_NAME				VARCHAR2(500),
	VACATED_DATE			VARCHAR2(100),
	ADMIN_CODE				VARCHAR2(10),
	ADMIN_CODE_DESCRIPTION	VARCHAR2(100),
	DUTY_STATION			VARCHAR2(2000),
	OFFICE_LOCATION			VARCHAR2(50),
	APPOINTMENT_TYPE		VARCHAR2(500),
	TEMPORARY_REASON		VARCHAR2(500),
	HIRING_PLAN				VARCHAR2(200),
	ADDITIONAL_HIRING_PLAN	VARCHAR2(100),
	SELECTING_OFFICIAL		VARCHAR2(100),
	PCN						VARCHAR2(10),
	CAN						VARCHAR2(10),
	SC_COMMENT				VARCHAR2(3000),
	CLS_COMMENT				VARCHAR2(3000),
	HR_COMMENT				VARCHAR2(3000),
	ADVERTISE_GRADE			VARCHAR2(100),
	TARGET_GRADE			VARCHAR2(2),
	WORKING_HOURS			VARCHAR2(3),
	WORK_SCHEDULE			VARCHAR2(20),
	WAY_CLOSE				VARCHAR2(20),
	CUT_OFF					VARCHAR2(10),
	ENTICEMENT				VARCHAR2(200),
	SPF						VARCHAR2(5),
	COMPLETED_JA			VARCHAR2(5),
	SPECIAL_EXP				VARCHAR2(3000),
	ADDITIONAL_REC			VARCHAR2(100),
	OTHER_REC				VARCHAR2(200),
	SME						VARCHAR2(200),
	REQ_LICENSURE			VARCHAR2(5),
	LAW101630				VARCHAR2(5),
	WAIT_9_MONTHS			VARCHAR2(5),
	WAIT_MONTHS				VARCHAR2(3),
	REQ_SHIFT				VARCHAR2(5),
	STANDBY					VARCHAR2(5),
	ONCALL					VARCHAR2(5),
	TRAVEL					VARCHAR2(20),
	OTHER_CONDITION			VARCHAR2(200),
	REQ_CREDENTIAL			VARCHAR2(5),
	REQ_DRUGTEST			VARCHAR2(5),
	ESSENTIAL				VARCHAR2(5),
	REQ_IMMUNIZATION		VARCHAR2(5),
	REQ_PHYSICAL			VARCHAR2(5),
	REQ_FD					VARCHAR2(5),
	REQ_SUP_PROBATION		VARCHAR2(5),
	CLEARANCE				VARCHAR2(30),
	SPECIAL_SALARY_RATE		VARCHAR2(5),
	PAY_TABLE				VARCHAR2(10)
);


-------------------------------------------------------
--  DDL for View V_IHS_RECRUITEMENT_REPORT
--------------------------------------------------------

CREATE OR REPLACE VIEW V_IHS_RECRUITEMENT_REPORT AS
SELECT r.*, p.CREATIONDTIME, p.CREATORNAME, p.CMPLTDTIME, v.VALUE REQUEST_STATUS
    FROM HHS_IHS_HR.IHS_RECRUITEMENT_DATA r
        INNER JOIN BIZFLOW.PROCS p ON r.TRACKING_NUMBER = p.procid
        INNER JOIN BIZFLOW.RLVNTDATA v ON r.TRACKING_NUMBER = v.procid AND v.rlvntdataname = 'requestStatus'
